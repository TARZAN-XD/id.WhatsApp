const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const qrcode = require('qrcode');
const {
  default: makeWASocket,
  useMultiFileAuthState,
  fetchLatestBaileysVersion
} = require('@whiskeysockets/baileys');
const fs = require('fs');
const path = require('path');

const app = express();
const server = http.createServer(app);
const io = new Server(server);

const PORT = process.env.PORT || 3000;

// ๐ ูุฌูุฏ ูุชุฎุฒูู ุงูุฌูุณุฉ
const SESSION_DIR = path.join(__dirname, 'session');
fs.mkdirSync(SESSION_DIR, { recursive: true });

// ๐ ูุฌูุฏ public ูููุงุฌูุฉ
app.use(express.static(path.join(__dirname, 'public')));

// โ ุนูุฏ ูุชุญ ุงูุณูุฑูุฑ
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

let sock;

// โ ุชุดุบูู ูุงุชุณุงุจ
async function startBot() {
  const { state, saveCreds } = await useMultiFileAuthState(SESSION_DIR);
  const { version } = await fetchLatestBaileysVersion();

  sock = makeWASocket({
    version,
    auth: state,
    printQRInTerminal: false
  });

  sock.ev.on('creds.update', saveCreds);

  // โ ุนูุฏ ุธููุฑ QR
  sock.ev.on('connection.update', async (update) => {
    const { connection, qr } = update;

    if (qr) {
      const qrImage = await qrcode.toDataURL(qr);
      io.emit('qr', qrImage);
    }

    if (connection === 'open') {
      console.log('โ ุชู ุงูุงุชุตุงู ุจูุฌุงุญ');
      io.emit('connected'); // ๐น ุฅุดุนุงุฑ ุงููุงุฌูุฉ ุฃู ุงูุงุชุตุงู ุชู
      await loadChats();
    }
  });

  // โ ุงุณุชูุจุงู ุงูุฑุณุงุฆู ุงูุฌุฏูุฏุฉ
  sock.ev.on('messages.upsert', async ({ messages }) => {
    console.log('๐ฉ ุฑุณุงูุฉ ุฌุฏูุฏุฉ:', messages[0]?.message?.conversation);
  });
}

// โ ุชุญููู ุงููุญุงุฏุซุงุช ุจุนุฏ ุงูุงุชุตุงู
async function loadChats() {
  try {
    const chats = await sock.store?.chats || [];
    const formattedChats = chats.map(c => ({
      id: c.id,
      name: c.name || c.id
    }));
    io.emit('chats', formattedChats);
  } catch (err) {
    console.error('โ ุฎุทุฃ ุฃุซูุงุก ุชุญููู ุงููุญุงุฏุซุงุช:', err.message);
  }
}

// โ ุฌูุจ ุงูุฑุณุงุฆู ุนูุฏ ุงุฎุชูุงุฑ ุงููุญุงุฏุซุฉ
io.on('connection', (socket) => {
  socket.on('getMessages', async (jid) => {
    try {
      const messages = await sock.fetchMessagesFromWA(jid, 20); // ุขุฎุฑ 20 ุฑุณุงูุฉ
      socket.emit('messages', { jid, messages });
    } catch (err) {
      console.error('โ ุฎุทุฃ ูู ุฌูุจ ุงูุฑุณุงุฆู:', err.message);
    }
  });
});

// โ ุจุฏุก ุงูุณูุฑูุฑ
server.listen(PORT, () => {
  console.log(`๐ ุงูุณูุฑูุฑ ุดุบุงู ุนูู http://localhost:${PORT}`);
  startBot();
});
